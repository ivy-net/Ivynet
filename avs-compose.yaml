services:
  anvil:
    container_name: anvil
    image: ghcr.io/foundry-rs/foundry@sha256:e3ba202249cccdffafc0d0e90c43baca8f03e4b0d7e273c0d33b8a5e3cea1eb7
    entrypoint: anvil
    hostname: anvil
    platform: linux/amd64
    ports:
        - "8545:8545"
    command: --host=0.0.0.0 --fork-url https://base.llamarpc.com
    healthcheck:
        test: ["CMD", "nc", "-z", "localhost", "8545"]
        interval: 30s
        timeout: 10s
        retries: 3

  feed-deployer:
    platform: linux/amd64
    image: "ghcr.io/foundry-rs/foundry:nightly-c2e529786c07ee7069cefcd4fe2db41f0e46cef6"
    entrypoint: cast
    command:
      - rpc 
      - anvil_setBalance
      - 0x123463a4b065722e99115d6c222f267d9cabb524
      - '10000000000000000000'
      - --rpc-url
      - http://anvil:8545
    depends_on:
      anvil:
        condition: service_healthy 

  feed-layer:
    platform: linux/amd64
    image: "ghcr.io/foundry-rs/foundry:nightly-c2e529786c07ee7069cefcd4fe2db41f0e46cef6"
    entrypoint: cast
    command:
      - rpc 
      - anvil_setBalance
      - 0x860B6912C2d0337ef05bbC89b0C2CB6CbAEAB4A5
      - '10000000000000000000'
      - --rpc-url
      - http://anvil:8545
    depends_on:
      feed-deployer:
        condition: service_completed_successfully


  # FoundaryUp based container with local image
  # deploying EigenLayer Contracts
  eigenlayer:
    platform: linux/amd64
    image: "public.ecr.aws/ivynet/iv1-is-avs:latest"
    command:
      - -vvv
      - --rpc-url
      - http://anvil:8545
      - --broadcast
      - --sig
      - "run(string memory configFile)"
      - --unlocked
      - --sender
      - 0x123463a4b065722e99115d6c222f267d9cabb524
      - script/deploy/devnet/M2_Deploy_From_Scratch.s.sol
      - --
      - M2_deploy_from_scratch.local.config.json
    working_dir: /eigenlayer/eigenlayer-contracts
    volumes:
      - ../../eigenlayer/M2_deploy_from_scratch.local.config.json:/eigenlayer/eigenlayer-contracts/script/configs/devnet/M2_deploy_from_scratch.local.config.json
      - ../../eigenlayer/output.json:/eigenlayer/eigenlayer-contracts/script/output/devnet/M2_from_scratch_deployment_data.json
      - ../../eigenlayer/run-latest.json:/eigenlayer/eigenlayer-contracts/broadcast/M2_Deploy_From_Scratch.s.sol/32382/run-latest.json
    depends_on:
      anvil:
        condition: service_healthy
      feed-deployer:
        condition: service_completed_successfully

  # FoundaryUp based container with local image
  # deploying Demo AVS
  avs-demo:
    platform: linux/amd64
    image: "public.ecr.aws/ivynet/iv1-is-avs:latest"
    command:
      - script/IncredibleSquaringDeployer.s.sol
      - -vvv
      - --rpc-url
      - http://geth:8545
      - --broadcast
      - --unlocked
      - --sender
      - 0x123463a4b065722e99115d6c222f267d9cabb524
    working_dir: /eigenlayer/incredible-squaring-avs/contracts
    volumes:
      - ../../eigenlayer/output.json:/eigenlayer/incredible-squaring-avs/contracts/script/output/32382/eigenlayer_deployment_output.json
      - ../../incredible-squaring-avs/output.json:/eigenlayer/incredible-squaring-avs/contracts/script/output/32382/credible_squaring_avs_deployment_output.json
    depends_on:
      eigenlayer:
        condition: service_completed_successfully

  # Start aggregator
  aggregator:
    image: ghcr.io/layr-labs/incredible-squaring/aggregator/cmd/main.go:latest
    command:
      - --config
      - aggregator-docker-compose.yaml
      - --credible-squaring-deployment
      - contracts/script/output/32382/credible_squaring_avs_deployment_output.json
      - --ecdsa-private-key
      - 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6
    volumes:
      - ../../incredible-squaring-avs/32382/aggregator-docker-compose.yaml:/incredible-squaring/aggregator-docker-compose.yaml
      - ../../incredible-squaring-avs/output.json:/incredible-squaring/contracts/script/output/32382/credible_squaring_avs_deployment_output.json
    working_dir: /incredible-squaring
    depends_on:
      feed-layer:
        condition: service_completed_successfully

  # Start operator
  operator:
    image: ghcr.io/layr-labs/incredible-squaring/operator/cmd/main.go:latest
    command: --config operator-docker-compose.yaml
    expose:
      - 9090
    volumes:
      - ../../incredible-squaring-avs/32382/operator-docker-compose.yaml:/incredible-squaring/operator-docker-compose.yaml
      - ../../incredible-squaring-avs/keys:/incredible-squaring/tests/keys
    working_dir: /incredible-squaring
    depends_on:
      aggregator:
        condition: service_started
      feed-layer:
        condition: service_completed_successfully

  # Set monitoring
  grafana:
    image: grafana/grafana:10.4.4
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../grafana/provisioning:/etc/grafana/provisioning
    environment:
      # See https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#override-configuration-with-environment-variables
      # and https://grafana.com/docs/grafana/latest/setup-grafana/configure-docker/
      # They recommend using env vars instead of overwriting config.ini
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    ports:
      - 3000:3000

  prometheus:
    image: prom/prometheus:v2.52.0
    volumes:
      - ../../prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
      - --web.enable-remote-write-receiver
    restart: unless-stopped
    ports:
      - 9090:9090
    # so that we can access the host from within the container
    # needed to get the metrics from host.docker.internal:9184/metrics
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  prometheus_data: {}
  grafana_data: {}
