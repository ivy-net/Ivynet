services:
  anvil:
    container_name: anvil
    image: ghcr.io/foundry-rs/foundry:latest
    entrypoint: anvil
    hostname: anvil
    platform: linux/amd64
    ports:
        - "8545:8545"
    command: --host=0.0.0.0

  feed-deployer:
    platform: linux/amd64
    image: ghcr.io/foundry-rs/foundry:latest
    entrypoint: cast
    command:
      - rpc
      - anvil_setBalance
      - 0x123463a4b065722e99115d6c222f267d9cabb524
      - '10000000000000000000'
      - --rpc-url
      - http://anvil:8545
    depends_on:
        autoimpersonation:
            condition: service_completed_successfully

  feed-layer:
    platform: linux/amd64
    image: ghcr.io/foundry-rs/foundry:latest
    entrypoint: cast
    command:
      - rpc
      - anvil_setBalance
      - 0x860B6912C2d0337ef05bbC89b0C2CB6CbAEAB4A5
      - '10000000000000000000'
      - --rpc-url
      - http://anvil:8545
    depends_on:
      feed-deployer:
        condition: service_completed_successfully

  autoimpersonation:
    platform: linux/amd64
    image: ghcr.io/foundry-rs/foundry:latest
    entrypoint: cast
    command:
      - rpc
      - anvil_autoImpersonateAccount
      - "true"
      - --rpc-url
      - http://anvil:8545
    depends_on:
        - anvil

  # FoundaryUp based container with local image
  # deploying EigenLayer Contracts
  eigenlayer:
    platform: linux/amd64
    image: "public.ecr.aws/ivynet/iv1-is-avs:latest"
    command:
      - -vvv
      - --rpc-url
      - http://anvil:8545
      - --broadcast
      - --sig
      - "run(string memory configFile)"
      - --unlocked
      - --sender
      - 0x123463a4b065722e99115d6c222f267d9cabb524
      - script/deploy/devnet/M2_Deploy_From_Scratch.s.sol
      - --
      - M2_deploy_from_scratch.local.config.json
    working_dir: /eigenlayer/eigenlayer-contracts
    volumes:
      - ./docker/eigenlayer/M2_deploy_from_scratch.local.config.json:/eigenlayer/eigenlayer-contracts/script/configs/devnet/M2_deploy_from_scratch.local.config.json
      - ./docker/eigenlayer/output.json:/eigenlayer/eigenlayer-contracts/script/output/devnet/M2_from_scratch_deployment_data.json
      - ./docker/eigenlayer/run-latest.json:/eigenlayer/eigenlayer-contracts/broadcast/M2_Deploy_From_Scratch.s.sol/31337/run-latest.json
    depends_on:
      anvil:
        condition: service_started
      feed-deployer:
        condition: service_completed_successfully

  lagrange-contracts:
    build: https://github.com/ivy-net/zkmr-avs-contracts.git#feature/dockerize
    command:
      - script
      - script/DeployAVS.s.sol:DeployAVS
      - -vvvv
      - --rpc-url
      - http://anvil:8545
      - --broadcast
      - --private-key
      - 0xdbda1821b80551c9d65939329250298aa3472ba22feea921c0cf5d620ea67b97
      - --ffi
    entrypoint: forge
    working_dir: /
    environment:
        WHITELISTED_OPERATORS: "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266,0x70997970C51812dc3A010C7d01b50e0d17dc79C8,0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC"
        PRIVATE_KEY: "0xdbda1821b80551c9d65939329250298aa3472ba22feea921c0cf5d620ea67b97"
        MAINNET_ETHERSCAN_API_KEY: "http://useless.com"
    volumes:
      - ./docker/lagrange/contracts/config:/config
      - ./docker/lagrange/contracts/script:/script
    depends_on:
      eigenlayer:
        condition: service_completed_successfully

  # lagrange-worker:
  #   build: https://github.com/ivy-net/lgn-coprocessor#feature/local-network
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./docker/lagrange/worker/config:/config
  #     - ./docker/lagrange/worker/params:/zkmr_params
  #   restart: always
  #   pull_policy: always
  #   command: ["worker", "--config", "/config/worker-conf.toml"]
  #   environment:
  #     DELEGATION_MANAGER_ADDR: 0x30bdaE426d3CBD42e9d41D23958Fac6AD8310f81
  #     AVS_DIRECTORY_ADDR: 0x8BfC4B63Cb65d1004c9e9a0a8982915Dc9aAAf29
  #     ZKMR_STAKE_REGISTRY_ADDR: 0xEe4cd8999aF659188720808e8af2f8DaB41EBD10
  #     ZKMR_SERVICE_MANAGER_ADDR: 0x70621A875adB93392e2B782e07fd3e1A953Ffb4f
  #     RPC_URL: http://anvil:8545
  #     AVS__ETH_PWD: ${AVS__ETH_PWD}
  #     AVS__ETH_KEYSTORE: /config/priv_key.json
  #     NETWORK: local
  #     AVS__LAGR_KEYSTORE: /config/lagr_keystore.json
  #     AVS__LAGR_PWD: ${AVS__LAGR_PWD}
  #     RUST_LOG: info,worker=debug
  #     PUBLIC_PARAMS__SKIP_STORE: false
  #   depends_on:
  #     lagrange-contracts:
  #       condition: service_completed_successfully

  # FoundaryUp based container with local image
  # deploying Demo AVS
  avs-demo:
    platform: linux/amd64
    image: "public.ecr.aws/ivynet/iv1-is-avs:latest"
    command:
      - script/IncredibleSquaringDeployer.s.sol
      - -vvv
      - --rpc-url
      - http://anvil:8545
      - --broadcast
      - --unlocked
      - --sender
      - 0x123463a4b065722e99115d6c222f267d9cabb524
    working_dir: /eigenlayer/incredible-squaring-avs/contracts
    volumes:
      - ./docker/eigenlayer/output.json:/eigenlayer/incredible-squaring-avs/contracts/script/output/31337/eigenlayer_deployment_output.json
      - ./docker/incredible-squaring-avs/output.json:/eigenlayer/incredible-squaring-avs/contracts/script/output/31337/credible_squaring_avs_deployment_output.json
    depends_on:
      eigenlayer:
        condition: service_completed_successfully

  # Start aggregator
  aggregator:
    image: ghcr.io/layr-labs/incredible-squaring/aggregator/cmd/main.go:latest
    command:
      - --config
      - aggregator-docker-compose.yaml
      - --credible-squaring-deployment
      - contracts/script/output/31337/incredible_squaring_avs_deployment_output.json
      - --ecdsa-private-key
      - 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6
    volumes:
      - ./docker/incredible-squaring-avs/31337/aggregator-docker-compose.yaml:/incredible-squaring/aggregator-docker-compose.yaml
      - ./docker/incredible-squaring-avs/output.json:/incredible-squaring/contracts/script/output/31337/incredible_squaring_avs_deployment_output.json
    working_dir: /incredible-squaring
    depends_on:
      avs-demo:
        condition: service_completed_successfully

  # Start operator
  operator:
    image: ghcr.io/layr-labs/incredible-squaring/operator/cmd/main.go:latest
    command: --config operator-docker-compose.yaml
    ports:
        - 9090:9090
    # expose:
    #   - 9090
    volumes:
      - ./docker/incredible-squaring-avs/31337/operator-docker-compose.yaml:/incredible-squaring/operator-docker-compose.yaml
      - ./docker/incredible-squaring-avs/keys:/incredible-squaring/tests/keys
    working_dir: /incredible-squaring
    depends_on:
      aggregator:
        condition: service_started
      avs-demo:
        condition: service_completed_successfully
