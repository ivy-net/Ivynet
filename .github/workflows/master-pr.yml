---
name: Build and Deploy for Master merge

on:
  pull_request:
    types:
      - closed
    branches:
      - master

permissions:
  id-token: write  # This is required for requesting the JWT
  contents: write  # This is required for creating a release

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and push backend binaries to GCP bucket
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Refresh source list
        run: |
          sudo apt update
      - name: Install dependencies
        run: >
          sudo apt install -y
          protobuf-compiler
          pkg-config
          libssl-dev
      - name: Build binaries
        run: |
          . "$HOME/.cargo/env"
          cargo build --release
      - name: Create dev binaries
        run: |
          DEST=/tmp/ivy-master
          cd target/release
          mkdir ${DEST}
          cp ivynet-backend ${DEST}
          cp ivynet-ingress ${DEST}
          cp scraper ${DEST}
      - name: Pack migrations
        run: |
          DEST=/tmp/ivy-master
          cd backend
          tar -czf migrations.tar.gz migrations
          cp migrations.tar.gz ${DEST}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
      - name: Upload file to the bucket
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: '/tmp/ivy-master'
          destination: 'ivynet-share-test'
          parent: true
          gzip: false
          process_gcloudignore: false

  update-dev:
    name: Ansible Update dev server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Inject packages
        run: >
          pipx inject ansible-core
          jmespath
          google-auth
          google-cloud-storage
          requests
      - name: Create a file with the vault password
        run: echo "$ANSIBLE_VAULT" > ~/.vault.txt
        env:
          ANSIBLE_VAULT: ${{ secrets.ANSIBLE_VAULT }}
      - name: Authenticate to Google Cloud
        id: google-creds
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
      - name: Run Ansible (after preparations)
        env:
          ANSIBLE_HOST_KEY_CHECKING: false
          ANSIBLE_PIPELINING: true
        run: |
          gcloud auth activate-service-account \
           --key-file=${GOOGLE_GHA_CREDS_PATH}
          export remote_user=$(gcloud compute os-login describe-profile \
           --format "value(posixAccounts.username)")
          cd devops/ansible
          jq -r .private_key ${GOOGLE_GHA_CREDS_PATH} > sa.prv
          chmod 600 sa.prv
          cp ${GOOGLE_GHA_CREDS_PATH} sa.json
          sed -i.bak 's/\~\/\.devops\-automation-key/sa/' gcp.yml
          ssh-agent > ~/.ssh-env
          source ~/.ssh-env
          ssh-add sa.prv
          ansible-playbook \
            -i gcp.yml \
            -u ${remote_user} \
            --vault-password-file ~/.vault.txt \
            -e "ivynet_backend_gcp_cred=sa.json ivynet_scraper_gcp_cred=sa.json" \
            backend-master.yml
