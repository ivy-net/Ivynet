---
name: DevOps test

on:
  push:
    branches-ignore:
      - dev
      - master
    paths:
      - .github/**
      - devops/**

jobs:
  update-test:
    name: Ansible Update test servers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Inject packages
        run: >
          pipx inject ansible-core
          jmespath
          google-auth
          requests
#      - name: Install TOML cli
#        run: |
#          . "$HOME/.cargo/env"
#          cargo install toml-cli
      - name: Create a file with the vault password
        run: echo "$ANSIBLE_VAULT" > ~/.vault.txt
        env:
          ANSIBLE_VAULT: ${{ secrets.ANSIBLE_VAULT }}
      - name: Authenticate to Google Cloud
        id: google-creds
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
      - name: Extract SSH private key and Run Ansible
        env:
          ANSIBLE_HOST_KEY_CHECKING: false
          ANSIBLE_PIPELINING: true
        run: |
          gcloud auth activate-service-account \
           --key-file=${GOOGLE_GHA_CREDS_PATH}
          remote_user=$(gcloud compute os-login describe-profile \
           --format "value(posixAccounts.username)")
          cd devops/ansible
          jq -r .private_key ${GOOGLE_GHA_CREDS_PATH} > sa.prv
          chmod 600 sa.prv
          ssh-keygen -y -f sa.prv > sa.prv.pub
          ip=$(gcloud compute instances list \
           --filter="labels.env=gha AND labels.area=backend" \
           --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
          echo "User: ${remote_user} @ IP: ${ip}"
          ssh \
           -i sa.prv \
           -o StrictHostKeyChecking=no \
           ${remote_user}@{$ip} \
           pwd
          cp ${GOOGLE_GHA_CREDS_PATH} sa.json
          sed -i.bak 's/\~\/\.devops\-automation-key/sa/' gcp.yml
          ansible-inventory -i gcp.yml --graph
          ansible \
           -m ping \
           -i gcp.yml \
           -u ${remote_user} \
           -e "ansible_ssh_private_key_file=sa.prv" \
           -vv \
           all

#          ./backend_update.sh

#          ansible-playbook \
#          -i gcp.yml \
#          -u ${remote_user} \
#          -e "ivynet_backend_release=${version}"\
#          --vault-password-file ~/.vault.txt \
#          backend.yml

#  devops-tests:
#    name: Various tests
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          ssh-key: "${{ secrets.ED_25519 }}"
#      - name: Get latest git tag
#        id: tag-backend
#        run: |
#          git pull --tags
#          tag=$(git tag | awk -F- '/backend/ {print $2}'| tail -1)
#          echo "TAG_BACKEND_GIT=${tag}" >> "$GITHUB_OUTPUT"
#          echo "Tag: ${tag}"
#      - name: Install TOML cli
#        run: |
#          . "$HOME/.cargo/env"
#          cargo install toml-cli
#      - name: Inject packages
#        run: >
#          pipx inject ansible-core
#          jmespath
#          google-auth
#          requests
#      - name: List packages
#        run: |
#          pipx list --include-injected
#      - name: List collections
#        run: |
#          ansible-galaxy collection list
#      - name: Version backend
#        id: version-backend
#        run: |
#          version=$(toml get backend/Cargo.toml package.version | tr -d \")
#          echo "TAG_BACKEND_TOML=${version}" >> "$GITHUB_OUTPUT"
#          echo "Version: ${version}"

#  build-image:
#    name: Build image with packer
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#      - name: Install extra python packages
#        run: >
#          pipx inject ansible-core
#          jmespath
#          google-auth
#          requests
#      - name: Install toml (package)
#        run: |
#          cargo install toml-cli
#      - name: Create a file with the vault password
#        run: echo "$ANSIBLE_VAULT" > ~/.vault.txt
#        env:
#          ANSIBLE_VAULT: ${{ secrets.ANSIBLE_VAULT }}
#      - name: Authenticate to Google Cloud
#        uses: google-github-actions/auth@v2
#        with:
#          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
#      - name: Google credentials for Packer
#        env:
#          PACKER_CREDS: '${{ secrets.PACKER_GCP_CREDENTIALS }}'
#        run: |
#          echo "${PACKER_CREDS}" >  /tmp/packer_gcp.json
#      - name: Run Packer
#        env:
#          CONFIG: cloudstation.pkr.hcl
#          GOOGLE_APPLICATION_CREDENTIALS: /tmp/packer_gcp.json
#          version: "003"
#        run: |
#          cd devops/packer
#          packer init ${CONFIG}
#          packer build -var "version=${version}" ${CONFIG}
