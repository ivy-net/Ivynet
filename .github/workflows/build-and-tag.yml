---
name: Build and Tag on Merge

on:
  pull_request:
    types:
      - closed
    branches:
      - release-*

permissions:
  id-token: write  # This is required for requesting the JWT
  contents: write  # This is required for creating a release

jobs:
  build:
    name: Build everything
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Refresh source list
        run: |
          sudo apt update
      - name: Install dependencies
        run: >
          sudo apt install -y
          protobuf-compiler
          pkg-config
          libssl-dev
      - name: Build binaries
        run: |
          . "$HOME/.cargo/env"
          cargo build --release

  tag-api:
    name: Tag api
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: "${{ secrets.ED_25519 }}"
      - name: Install TOML cli
        run: |
          cd /usr/local/bin
          wget https://storage.googleapis.com/ivynet-share/toml
          chmod 0755 toml
      - name: Extract TOML version
        id: version-api
        run: |
          version=$(toml get api/Cargo.toml package.version | tr -d \")
          echo "TAG_API_TOML=${version}" >> "$GITHUB_OUTPUT"
          echo "Version: ${version}"
      - name: Get latest git tag
        id: tag-api
        run: |
          git pull --tags
          tag=$(git tag | awk -F- '/api/ {print $2}'| sort -V | tail -1)
          echo "TAG_API_GIT=${tag}" >> "$GITHUB_OUTPUT"
          echo "Tag: ${tag}"
      - name: Print versions
        run: |
          echo "TOML: ${{ steps.version-api.outputs.TAG_API_TOML }}"
          echo "GIT: ${{ steps.tag-api.outputs.TAG_API_GIT }}"
      - name: Create new git tag
        if: >
          steps.version-api.outputs.TAG_API_TOML
          !=
          steps.tag-api.outputs.TAG_API_GIT
        env:
          NEW_TAG: api-${{ steps.version-api.outputs.TAG_API_TOML }}
        run: |
          git tag -f ${NEW_TAG}
          git push origin ${NEW_TAG}

  tag-cli:
    name: Tag client
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: "${{ secrets.ED_25519 }}"
      - name: Install TOML cli
        run: |
          cd /usr/local/bin
          wget https://storage.googleapis.com/ivynet-share/toml
          chmod 0755 toml
      - name: Extract TOML version
        id: version-cli
        run: |
          version=$(toml get cli/Cargo.toml package.version | tr -d \")
          echo "TAG_CLI_TOML=${version}" >> "$GITHUB_OUTPUT"
          echo "Version: ${version}"
      - name: Get latest tag
        id: tag-cli
        run: |
          git pull --tags
          tag=$(git tag | awk -F- '/client/ {print $2}' | sort -V | tail -1)
          echo "TAG_CLI_GIT=${tag}" >> "$GITHUB_OUTPUT"
          echo "Tag: ${tag}"
      - name: Print versions
        run: |
          echo "TOML: ${{ steps.version-cli.outputs.TAG_CLI_TOML }}"
          echo "GIT: ${{ steps.tag-cli.outputs.TAG_CLI_GIT }}"
      - name: Create git tag
        if: >
          steps.version-cli.outputs.TAG_CLI_TOML
          !=
          steps.tag-cli.outputs.TAG_CLI_GIT
        env:
          NEW_TAG: client-${{ steps.version-cli.outputs.TAG_CLI_TOML }}
        run: |
          git tag -f ${NEW_TAG}
          git push origin ${NEW_TAG}

  tag-ingress:
    name: Tag ingress
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: "${{ secrets.ED_25519 }}"
      - name: Install TOML cli
        run: |
          cd /usr/local/bin
          wget https://storage.googleapis.com/ivynet-share/toml
          chmod 0755 toml
      - name: Extract TOML version
        id: version-ingress
        run: |
          version=$(toml get ingress/Cargo.toml package.version | tr -d \")
          echo "TAG_API_TOML=${version}" >> "$GITHUB_OUTPUT"
          echo "Version: ${version}"
      - name: Get latest git tag
        id: tag-ingress
        run: |
          git pull --tags
          tag=$(git tag | awk -F- '/ingress/ {print $2}'| sort -V | tail -1)
          echo "TAG_API_GIT=${tag}" >> "$GITHUB_OUTPUT"
          echo "Tag: ${tag}"
      - name: Print versions
        run: |
          echo "TOML: ${{ steps.version-ingress.outputs.TAG_API_TOML }}"
          echo "GIT: ${{ steps.tag-ingress.outputs.TAG_API_GIT }}"
      - name: Create new git tag
        if: >
          steps.version-ingress.outputs.TAG_API_TOML
          !=
          steps.tag-ingress.outputs.TAG_API_GIT
        env:
          NEW_TAG: ingress-${{ steps.version-ingress.outputs.TAG_API_TOML }}
        run: |
          git tag -f ${NEW_TAG}
          git push origin ${NEW_TAG}

  tag-scanner:
    name: Tag scanner
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: "${{ secrets.ED_25519 }}"
      - name: Install TOML cli
        run: |
          cd /usr/local/bin
          wget https://storage.googleapis.com/ivynet-share/toml
          chmod 0755 toml
      - name: Extract TOML version
        id: version-scanner
        run: |
          version=$(toml get scanner/Cargo.toml package.version | tr -d \")
          echo "TAG_API_TOML=${version}" >> "$GITHUB_OUTPUT"
          echo "Version: ${version}"
      - name: Get latest git tag
        id: tag-scanner
        run: |
          git pull --tags
          tag=$(git tag | awk -F- '/scanner/ {print $2}'| sort -V | tail -1)
          echo "TAG_API_GIT=${tag}" >> "$GITHUB_OUTPUT"
          echo "Tag: ${tag}"
      - name: Print versions
        run: |
          echo "TOML: ${{ steps.version-scanner.outputs.TAG_API_TOML }}"
          echo "GIT: ${{ steps.tag-scanner.outputs.TAG_API_GIT }}"
      - name: Create new git tag
        if: >
          steps.version-scanner.outputs.TAG_API_TOML
          !=
          steps.tag-scanner.outputs.TAG_API_GIT
        env:
          NEW_TAG: scanner-${{ steps.version-scanner.outputs.TAG_API_TOML }}
        run: |
          git tag -f ${NEW_TAG}
          git push origin ${NEW_TAG}
